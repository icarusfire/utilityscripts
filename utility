from datetime import datetime, timedelta, time

def next_week_targets(today=None):
    """
    Return next week's Thursday 06:00 UTC and Friday 12:00 UTC
    as ('mm-dd-YYYY HH:MM:SS', 'mm-dd-YYYY HH:MM:SS').
    """
    if today is None:
        today = datetime.utcnow().date()

    this_monday   = today - timedelta(days=today.weekday())   # Monday of current week
    next_monday   = this_monday + timedelta(days=7)           # Monday of *next* week
    thursday_utc  = datetime.combine(next_monday + timedelta(days=3), time(6,  0, 0))
    friday_utc    = datetime.combine(next_monday + timedelta(days=4), time(12, 0, 0))
    fmt = "%m-%d-%Y %H:%M:%S"
    return thursday_utc.strftime(fmt), friday_utc.strftime(fmt)


import unittest, datetime as dt
class TestNextWeekTargets(unittest.TestCase):
    def test_example(self):
        self.assertEqual(
            next_week_targets(dt.date(2025, 7, 3)),
            ("07-10-2025 06:00:00", "07-11-2025 12:00:00")
        )
    def test_year_boundary(self):
        self.assertEqual(
            next_week_targets(dt.date(2024, 12, 31)),
            ("01-09-2025 06:00:00", "01-10-2025 12:00:00")
        )
    def test_february(self):
        self.assertEqual(
            next_week_targets(dt.date(2025, 2, 28)),
            ("03-06-2025 06:00:00", "03-07-2025 12:00:00")
        )
    def test_leap_year(self):
        self.assertEqual(
            next_week_targets(dt.date(2024, 2, 29)),
            ("03-07-2024 06:00:00", "03-08-2024 12:00:00")
        )

if __name__ == "__main__":
    unittest.main()
