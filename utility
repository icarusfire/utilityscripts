# file: grafana_time_link.py
import datetime as dt
import re
from zoneinfo import ZoneInfo        # Python â‰¥ 3.9

# --- CONFIG ---------------------------------------------------------------
TEMPLATE_URL = (
    "https://myurl/explore?...from%22%3A%221751298600000%22%2C%22to%22%3A%221751298660000%22..."
    "&orgId=1"
)
TZ_NL = ZoneInfo("Europe/Amsterdam")
_RANGE_REGEX = re.compile(r"from%22%3A%22\d+%22%2C%22to%22%3A%22\d+%22")
# --------------------------------------------------------------------------

def make_link(base_url: str = TEMPLATE_URL,
              when: dt.datetime | None = None) -> str:
    """
    Replace the 'from' and 'to' epoch values in `base_url` with a single
    timestamp (millis since epoch).  `from` and `to` become identical.

    Parameters
    ----------
    base_url : str
        Grafana URL that already contains a 'range' JSON block.
    when : datetime.datetime | None
        Moment that becomes the new `from` AND `to`.
        Defaults to 'now' in Europe/Amsterdam.

    Returns
    -------
    str
        URL with fresh, zero-width time range.
    """
    if when is None:
        when = dt.datetime.now(TZ_NL)

    epoch_ms = int(when.timestamp() * 1000)

    replacement = (
        f"from%22%3A%22{epoch_ms}%22%2C%22to%22%3A%22{epoch_ms}%22"
    )
    return _RANGE_REGEX.sub(replacement, base_url)


if __name__ == "__main__":
    print(make_link())          # manual smoke-test




# file: test_grafana_time_link.py
import datetime as dt
from zoneinfo import ZoneInfo
import re
import grafana_time_link as gl

def test_zero_window():
    tz = ZoneInfo("Europe/Amsterdam")
    fixed = dt.datetime(2025, 6, 30, 17, 50, tzinfo=tz)   # 15:50 UTC
    url = gl.make_link(when=fixed)

    # extract the two numbers
    m = re.search(r"from%22%3A%22(\d+)%22%2C%22to%22%3A%22(\d+)%22", url)
    assert m, "'range' block missing"
    f_ms, t_ms = map(int, m.groups())

    # both must be identical
    assert f_ms == t_ms == 1751298600000

